// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdditionalInfoForm component should match snapshot 1`] = `
<ApolloProvider
  client={
    ApolloClient {
      "cache": InMemoryCache {
        "addTypename": true,
        "cacheKeyRoot": KeyTrie {
          "weakness": true,
        },
        "config": Object {
          "addTypename": true,
          "dataIdFromObject": [Function],
          "fragmentMatcher": HeuristicFragmentMatcher {},
          "freezeResults": false,
          "resultCaching": true,
        },
        "data": DepTrackingCache {
          "data": Object {},
          "depend": [Function],
        },
        "maybeBroadcastWatch": [Function],
        "optimisticData": DepTrackingCache {
          "data": Object {},
          "depend": [Function],
        },
        "silenceBroadcast": false,
        "storeReader": StoreReader {
          "executeSelectionSet": [Function],
          "executeStoreQuery": [Function],
          "executeSubSelectedArray": [Function],
          "freezeResults": false,
        },
        "storeWriter": StoreWriter {},
        "typenameDocumentCache": Map {},
        "watches": Set {},
      },
      "clearStoreCallbacks": Array [],
      "defaultOptions": Object {},
      "disableNetworkFetches": false,
      "link": ApolloLink {
        "request": [Function],
      },
      "localState": LocalState {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "client": [Circular],
      },
      "mutate": [Function],
      "query": [Function],
      "queryDeduplication": true,
      "queryManager": QueryManager {
        "assumeImmutableResults": false,
        "clientAwareness": Object {
          "name": undefined,
          "version": undefined,
        },
        "dataStore": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "fetchQueryRejectFns": Map {},
        "idCounter": 1,
        "inFlightLinkObservables": Map {},
        "link": ApolloLink {
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutationStore": MutationStore {
          "store": Object {},
        },
        "onBroadcast": [Function],
        "pollingInfoByQueryId": Map {},
        "queries": Map {},
        "queryDeduplication": true,
        "queryStore": QueryStore {
          "store": Object {},
        },
        "ssrMode": false,
        "transformCache": WeakMap {},
      },
      "reFetchObservableQueries": [Function],
      "resetStore": [Function],
      "resetStoreCallbacks": Array [],
      "store": DataStore {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
      },
      "typeDefs": undefined,
      "version": "2.6.10",
      "watchQuery": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <AdditionalInfoForm
        handleNext={[MockFunction]}
      >
        <Formik
          initialValues={
            Object {
              "currency": "",
              "monthLimit": "",
            }
          }
          onSubmit={[Function]}
        >
          <Form>
            <form
              action="#"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <WithStyles(ForwardRef(Typography))
                gutterBottom={true}
                variant="h6"
              >
                <ForwardRef(Typography)
                  classes={
                    Object {
                      "alignCenter": "MuiTypography-alignCenter",
                      "alignJustify": "MuiTypography-alignJustify",
                      "alignLeft": "MuiTypography-alignLeft",
                      "alignRight": "MuiTypography-alignRight",
                      "body1": "MuiTypography-body1",
                      "body2": "MuiTypography-body2",
                      "button": "MuiTypography-button",
                      "caption": "MuiTypography-caption",
                      "colorError": "MuiTypography-colorError",
                      "colorInherit": "MuiTypography-colorInherit",
                      "colorPrimary": "MuiTypography-colorPrimary",
                      "colorSecondary": "MuiTypography-colorSecondary",
                      "colorTextPrimary": "MuiTypography-colorTextPrimary",
                      "colorTextSecondary": "MuiTypography-colorTextSecondary",
                      "displayBlock": "MuiTypography-displayBlock",
                      "displayInline": "MuiTypography-displayInline",
                      "gutterBottom": "MuiTypography-gutterBottom",
                      "h1": "MuiTypography-h1",
                      "h2": "MuiTypography-h2",
                      "h3": "MuiTypography-h3",
                      "h4": "MuiTypography-h4",
                      "h5": "MuiTypography-h5",
                      "h6": "MuiTypography-h6",
                      "noWrap": "MuiTypography-noWrap",
                      "overline": "MuiTypography-overline",
                      "paragraph": "MuiTypography-paragraph",
                      "root": "MuiTypography-root",
                      "srOnly": "MuiTypography-srOnly",
                      "subtitle1": "MuiTypography-subtitle1",
                      "subtitle2": "MuiTypography-subtitle2",
                    }
                  }
                  gutterBottom={true}
                  variant="h6"
                >
                  <h6
                    className="MuiTypography-root MuiTypography-h6 MuiTypography-gutterBottom"
                  >
                    Additional Info
                  </h6>
                </ForwardRef(Typography)>
              </WithStyles(ForwardRef(Typography))>
              <WithStyles(ForwardRef(Grid))
                className="row row-vert-end"
                container={true}
                spacing={3}
              >
                <ForwardRef(Grid)
                  className="row row-vert-end"
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-xs-center": "MuiGrid-justify-xs-center",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  container={true}
                  spacing={3}
                >
                  <div
                    className="MuiGrid-root row row-vert-end MuiGrid-container MuiGrid-spacing-xs-3"
                  >
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      md={6}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        md={6}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-6"
                        >
                          <WithStyles(ForwardRef(InputLabel))
                            htmlFor="currency"
                            shrink={true}
                          >
                            <ForwardRef(InputLabel)
                              classes={
                                Object {
                                  "animated": "MuiInputLabel-animated",
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiInputLabel-filled",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInputLabel-formControl",
                                  "marginDense": "MuiInputLabel-marginDense",
                                  "outlined": "MuiInputLabel-outlined",
                                  "required": "Mui-required",
                                  "root": "MuiInputLabel-root",
                                  "shrink": "MuiInputLabel-shrink",
                                }
                              }
                              htmlFor="currency"
                              shrink={true}
                            >
                              <WithStyles(ForwardRef(FormLabel))
                                className="MuiInputLabel-root MuiInputLabel-animated MuiInputLabel-shrink"
                                classes={
                                  Object {
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "required": "Mui-required",
                                  }
                                }
                                data-shrink={true}
                                htmlFor="currency"
                              >
                                <ForwardRef(FormLabel)
                                  className="MuiInputLabel-root MuiInputLabel-animated MuiInputLabel-shrink"
                                  classes={
                                    Object {
                                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                      "colorSecondary": "MuiFormLabel-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "filled": "MuiFormLabel-filled",
                                      "focused": "Mui-focused Mui-focused",
                                      "required": "Mui-required Mui-required",
                                      "root": "MuiFormLabel-root",
                                    }
                                  }
                                  data-shrink={true}
                                  htmlFor="currency"
                                >
                                  <label
                                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated MuiInputLabel-shrink"
                                    data-shrink={true}
                                    htmlFor="currency"
                                  >
                                    Your currency
                                  </label>
                                </ForwardRef(FormLabel)>
                              </WithStyles(ForwardRef(FormLabel))>
                            </ForwardRef(InputLabel)>
                          </WithStyles(ForwardRef(InputLabel))>
                          <Field
                            component={[Function]}
                            defaultValue="none"
                            fullWidth={true}
                            inputProps={
                              Object {
                                "data-testid": "currency-selector",
                              }
                            }
                            label="Currency"
                            name="currency"
                            placeholder="Currency"
                          >
                            <FormikMaterialUISelect
                              defaultValue="none"
                              field={
                                Object {
                                  "name": "currency",
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "value": "",
                                }
                              }
                              form={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "getFieldHelpers": [Function],
                                  "getFieldMeta": [Function],
                                  "getFieldProps": [Function],
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialErrors": Object {},
                                  "initialStatus": undefined,
                                  "initialTouched": Object {},
                                  "initialValues": Object {
                                    "currency": "",
                                    "monthLimit": "",
                                  },
                                  "isSubmitting": false,
                                  "isValid": true,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validateOnMount": false,
                                  "values": Object {
                                    "currency": "",
                                    "monthLimit": "",
                                  },
                                }
                              }
                              fullWidth={true}
                              inputProps={
                                Object {
                                  "data-testid": "currency-selector",
                                }
                              }
                              label="Currency"
                              placeholder="Currency"
                            >
                              <WithStyles(ForwardRef(Select))
                                defaultValue="none"
                                disabled={false}
                                fullWidth={true}
                                inputProps={
                                  Object {
                                    "data-testid": "currency-selector",
                                  }
                                }
                                label="Currency"
                                name="currency"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="Currency"
                                value=""
                              >
                                <ForwardRef(Select)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  defaultValue="none"
                                  disabled={false}
                                  fullWidth={true}
                                  inputProps={
                                    Object {
                                      "data-testid": "currency-selector",
                                    }
                                  }
                                  label="Currency"
                                  name="currency"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  placeholder="Currency"
                                  value=""
                                >
                                  <WithStyles(ForwardRef(Input))
                                    defaultValue="none"
                                    disabled={false}
                                    fullWidth={true}
                                    inputComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "IconComponent": [Function],
                                          "MenuProps": [Function],
                                          "SelectDisplayProps": [Function],
                                          "aria-label": [Function],
                                          "autoFocus": [Function],
                                          "autoWidth": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "defaultValue": [Function],
                                          "disabled": [Function],
                                          "displayEmpty": [Function],
                                          "inputRef": [Function],
                                          "labelId": [Function],
                                          "multiple": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onClose": [Function],
                                          "onFocus": [Function],
                                          "onOpen": [Function],
                                          "open": [Function],
                                          "readOnly": [Function],
                                          "renderValue": [Function],
                                          "tabIndex": [Function],
                                          "type": [Function],
                                          "value": [Function],
                                          "variant": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    inputProps={
                                      Object {
                                        "IconComponent": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": Object {
                                          "id": undefined,
                                        },
                                        "autoWidth": false,
                                        "children": Array [
                                          <ForwardRef(WithStyles)
                                            value="USD"
                                          >
                                            $
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="EUR"
                                          >
                                            €
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="BTC"
                                          >
                                            ฿
                                          </ForwardRef(WithStyles)>,
                                          <ForwardRef(WithStyles)
                                            value="JPY"
                                          >
                                            ¥
                                          </ForwardRef(WithStyles)>,
                                        ],
                                        "classes": Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOpen": "MuiSelect-iconOpen",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "nativeInput": "MuiSelect-nativeInput",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        },
                                        "data-testid": "currency-selector",
                                        "displayEmpty": false,
                                        "labelId": undefined,
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "standard",
                                      }
                                    }
                                    name="currency"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder="Currency"
                                    value=""
                                  >
                                    <ForwardRef(Input)
                                      classes={
                                        Object {
                                          "colorSecondary": "MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "formControl": "MuiInput-formControl",
                                          "fullWidth": "MuiInput-fullWidth",
                                          "input": "MuiInput-input",
                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInput-marginDense",
                                          "multiline": "MuiInput-multiline",
                                          "root": "MuiInput-root",
                                          "underline": "MuiInput-underline",
                                        }
                                      }
                                      defaultValue="none"
                                      disabled={false}
                                      fullWidth={true}
                                      inputComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "IconComponent": [Function],
                                            "MenuProps": [Function],
                                            "SelectDisplayProps": [Function],
                                            "aria-label": [Function],
                                            "autoFocus": [Function],
                                            "autoWidth": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "defaultValue": [Function],
                                            "disabled": [Function],
                                            "displayEmpty": [Function],
                                            "inputRef": [Function],
                                            "labelId": [Function],
                                            "multiple": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onClose": [Function],
                                            "onFocus": [Function],
                                            "onOpen": [Function],
                                            "open": [Function],
                                            "readOnly": [Function],
                                            "renderValue": [Function],
                                            "tabIndex": [Function],
                                            "type": [Function],
                                            "value": [Function],
                                            "variant": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      inputProps={
                                        Object {
                                          "IconComponent": Object {
                                            "$$typeof": Symbol(react.memo),
                                            "compare": null,
                                            "type": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                          },
                                          "MenuProps": undefined,
                                          "SelectDisplayProps": Object {
                                            "id": undefined,
                                          },
                                          "autoWidth": false,
                                          "children": Array [
                                            <ForwardRef(WithStyles)
                                              value="USD"
                                            >
                                              $
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="EUR"
                                            >
                                              €
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="BTC"
                                            >
                                              ฿
                                            </ForwardRef(WithStyles)>,
                                            <ForwardRef(WithStyles)
                                              value="JPY"
                                            >
                                              ¥
                                            </ForwardRef(WithStyles)>,
                                          ],
                                          "classes": Object {
                                            "disabled": "Mui-disabled",
                                            "filled": "MuiSelect-filled",
                                            "icon": "MuiSelect-icon",
                                            "iconFilled": "MuiSelect-iconFilled",
                                            "iconOpen": "MuiSelect-iconOpen",
                                            "iconOutlined": "MuiSelect-iconOutlined",
                                            "nativeInput": "MuiSelect-nativeInput",
                                            "outlined": "MuiSelect-outlined",
                                            "root": "MuiSelect-root",
                                            "select": "MuiSelect-select",
                                            "selectMenu": "MuiSelect-selectMenu",
                                          },
                                          "data-testid": "currency-selector",
                                          "displayEmpty": false,
                                          "labelId": undefined,
                                          "multiple": false,
                                          "onClose": undefined,
                                          "onOpen": undefined,
                                          "open": undefined,
                                          "renderValue": undefined,
                                          "type": undefined,
                                          "variant": "standard",
                                        }
                                      }
                                      name="currency"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="Currency"
                                      value=""
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        classes={
                                          Object {
                                            "colorSecondary": "MuiInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "formControl": "MuiInput-formControl",
                                            "fullWidth": "MuiInput-fullWidth",
                                            "input": "MuiInput-input",
                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                            "inputMultiline": "MuiInput-inputMultiline",
                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                            "marginDense": "MuiInput-marginDense",
                                            "multiline": "MuiInput-multiline",
                                            "root": "MuiInput-root MuiInput-underline",
                                            "underline": null,
                                          }
                                        }
                                        defaultValue="none"
                                        disabled={false}
                                        fullWidth={true}
                                        inputComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "propTypes": Object {
                                              "IconComponent": [Function],
                                              "MenuProps": [Function],
                                              "SelectDisplayProps": [Function],
                                              "aria-label": [Function],
                                              "autoFocus": [Function],
                                              "autoWidth": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classes": [Function],
                                              "defaultValue": [Function],
                                              "disabled": [Function],
                                              "displayEmpty": [Function],
                                              "inputRef": [Function],
                                              "labelId": [Function],
                                              "multiple": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onClose": [Function],
                                              "onFocus": [Function],
                                              "onOpen": [Function],
                                              "open": [Function],
                                              "readOnly": [Function],
                                              "renderValue": [Function],
                                              "tabIndex": [Function],
                                              "type": [Function],
                                              "value": [Function],
                                              "variant": [Function],
                                            },
                                            "render": [Function],
                                          }
                                        }
                                        inputProps={
                                          Object {
                                            "IconComponent": Object {
                                              "$$typeof": Symbol(react.memo),
                                              "compare": null,
                                              "type": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "render": [Function],
                                              },
                                            },
                                            "MenuProps": undefined,
                                            "SelectDisplayProps": Object {
                                              "id": undefined,
                                            },
                                            "autoWidth": false,
                                            "children": Array [
                                              <ForwardRef(WithStyles)
                                                value="USD"
                                              >
                                                $
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="EUR"
                                              >
                                                €
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="BTC"
                                              >
                                                ฿
                                              </ForwardRef(WithStyles)>,
                                              <ForwardRef(WithStyles)
                                                value="JPY"
                                              >
                                                ¥
                                              </ForwardRef(WithStyles)>,
                                            ],
                                            "classes": Object {
                                              "disabled": "Mui-disabled",
                                              "filled": "MuiSelect-filled",
                                              "icon": "MuiSelect-icon",
                                              "iconFilled": "MuiSelect-iconFilled",
                                              "iconOpen": "MuiSelect-iconOpen",
                                              "iconOutlined": "MuiSelect-iconOutlined",
                                              "nativeInput": "MuiSelect-nativeInput",
                                              "outlined": "MuiSelect-outlined",
                                              "root": "MuiSelect-root",
                                              "select": "MuiSelect-select",
                                              "selectMenu": "MuiSelect-selectMenu",
                                            },
                                            "data-testid": "currency-selector",
                                            "displayEmpty": false,
                                            "labelId": undefined,
                                            "multiple": false,
                                            "onClose": undefined,
                                            "onOpen": undefined,
                                            "open": undefined,
                                            "renderValue": undefined,
                                            "type": undefined,
                                            "variant": "standard",
                                          }
                                        }
                                        multiline={false}
                                        name="currency"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        placeholder="Currency"
                                        type="text"
                                        value=""
                                      >
                                        <ForwardRef(InputBase)
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                              "input": "MuiInputBase-input MuiInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                              "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                            }
                                          }
                                          defaultValue="none"
                                          disabled={false}
                                          fullWidth={true}
                                          inputComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "propTypes": Object {
                                                "IconComponent": [Function],
                                                "MenuProps": [Function],
                                                "SelectDisplayProps": [Function],
                                                "aria-label": [Function],
                                                "autoFocus": [Function],
                                                "autoWidth": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classes": [Function],
                                                "defaultValue": [Function],
                                                "disabled": [Function],
                                                "displayEmpty": [Function],
                                                "inputRef": [Function],
                                                "labelId": [Function],
                                                "multiple": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onClose": [Function],
                                                "onFocus": [Function],
                                                "onOpen": [Function],
                                                "open": [Function],
                                                "readOnly": [Function],
                                                "renderValue": [Function],
                                                "tabIndex": [Function],
                                                "type": [Function],
                                                "value": [Function],
                                                "variant": [Function],
                                              },
                                              "render": [Function],
                                            }
                                          }
                                          inputProps={
                                            Object {
                                              "IconComponent": Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "type": Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "render": [Function],
                                                },
                                              },
                                              "MenuProps": undefined,
                                              "SelectDisplayProps": Object {
                                                "id": undefined,
                                              },
                                              "autoWidth": false,
                                              "children": Array [
                                                <ForwardRef(WithStyles)
                                                  value="USD"
                                                >
                                                  $
                                                </ForwardRef(WithStyles)>,
                                                <ForwardRef(WithStyles)
                                                  value="EUR"
                                                >
                                                  €
                                                </ForwardRef(WithStyles)>,
                                                <ForwardRef(WithStyles)
                                                  value="BTC"
                                                >
                                                  ฿
                                                </ForwardRef(WithStyles)>,
                                                <ForwardRef(WithStyles)
                                                  value="JPY"
                                                >
                                                  ¥
                                                </ForwardRef(WithStyles)>,
                                              ],
                                              "classes": Object {
                                                "disabled": "Mui-disabled",
                                                "filled": "MuiSelect-filled",
                                                "icon": "MuiSelect-icon",
                                                "iconFilled": "MuiSelect-iconFilled",
                                                "iconOpen": "MuiSelect-iconOpen",
                                                "iconOutlined": "MuiSelect-iconOutlined",
                                                "nativeInput": "MuiSelect-nativeInput",
                                                "outlined": "MuiSelect-outlined",
                                                "root": "MuiSelect-root",
                                                "select": "MuiSelect-select",
                                                "selectMenu": "MuiSelect-selectMenu",
                                              },
                                              "data-testid": "currency-selector",
                                              "displayEmpty": false,
                                              "labelId": undefined,
                                              "multiple": false,
                                              "onClose": undefined,
                                              "onOpen": undefined,
                                              "open": undefined,
                                              "renderValue": undefined,
                                              "type": undefined,
                                              "variant": "standard",
                                            }
                                          }
                                          multiline={false}
                                          name="currency"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          placeholder="Currency"
                                          type="text"
                                          value=""
                                        >
                                          <div
                                            className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth"
                                            onClick={[Function]}
                                          >
                                            <ForwardRef(SelectInput)
                                              IconComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.memo),
                                                  "compare": null,
                                                  "type": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "render": [Function],
                                                  },
                                                }
                                              }
                                              SelectDisplayProps={
                                                Object {
                                                  "id": undefined,
                                                }
                                              }
                                              autoWidth={false}
                                              className="MuiInputBase-input MuiInput-input"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "filled": "MuiSelect-filled",
                                                  "icon": "MuiSelect-icon",
                                                  "iconFilled": "MuiSelect-iconFilled",
                                                  "iconOpen": "MuiSelect-iconOpen",
                                                  "iconOutlined": "MuiSelect-iconOutlined",
                                                  "nativeInput": "MuiSelect-nativeInput",
                                                  "outlined": "MuiSelect-outlined",
                                                  "root": "MuiSelect-root",
                                                  "select": "MuiSelect-select",
                                                  "selectMenu": "MuiSelect-selectMenu",
                                                }
                                              }
                                              data-testid="currency-selector"
                                              defaultValue="none"
                                              disabled={false}
                                              displayEmpty={false}
                                              inputRef={[Function]}
                                              multiple={false}
                                              name="currency"
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              placeholder="Currency"
                                              value=""
                                              variant="standard"
                                            >
                                              <div
                                                aria-haspopup="listbox"
                                                aria-labelledby="mui-component-select-currency"
                                                className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                id="mui-component-select-currency"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onMouseDown={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <span
                                                  dangerouslySetInnerHTML={
                                                    Object {
                                                      "__html": "&#8203;",
                                                    }
                                                  }
                                                />
                                              </div>
                                              <input
                                                aria-hidden={true}
                                                className="MuiSelect-nativeInput"
                                                data-testid="currency-selector"
                                                name="currency"
                                                onAnimationStart={[Function]}
                                                onChange={[Function]}
                                                placeholder="Currency"
                                                tabIndex={-1}
                                                value=""
                                              />
                                              <ForwardRef(ArrowDropDownIcon)
                                                className="MuiSelect-icon"
                                              >
                                                <WithStyles(ForwardRef(SvgIcon))
                                                  className="MuiSelect-icon"
                                                >
                                                  <ForwardRef(SvgIcon)
                                                    className="MuiSelect-icon"
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="MuiSvgIcon-root MuiSelect-icon"
                                                      focusable="false"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M7 10l5 5 5-5z"
                                                      />
                                                    </svg>
                                                  </ForwardRef(SvgIcon)>
                                                </WithStyles(ForwardRef(SvgIcon))>
                                              </ForwardRef(ArrowDropDownIcon)>
                                              <WithStyles(ForwardRef(Menu))
                                                MenuListProps={
                                                  Object {
                                                    "aria-labelledby": undefined,
                                                    "disableListWrap": true,
                                                    "role": "listbox",
                                                  }
                                                }
                                                PaperProps={
                                                  Object {
                                                    "style": Object {
                                                      "minWidth": undefined,
                                                    },
                                                  }
                                                }
                                                anchorEl={
                                                  <div
                                                    aria-haspopup="listbox"
                                                    aria-labelledby="mui-component-select-currency"
                                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                    id="mui-component-select-currency"
                                                    role="button"
                                                    tabindex="0"
                                                  >
                                                    <span>
                                                      ​
                                                    </span>
                                                  </div>
                                                }
                                                id="menu-currency"
                                                onClose={[Function]}
                                                open={false}
                                              >
                                                <ForwardRef(Menu)
                                                  MenuListProps={
                                                    Object {
                                                      "aria-labelledby": undefined,
                                                      "disableListWrap": true,
                                                      "role": "listbox",
                                                    }
                                                  }
                                                  PaperProps={
                                                    Object {
                                                      "style": Object {
                                                        "minWidth": undefined,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={
                                                    <div
                                                      aria-haspopup="listbox"
                                                      aria-labelledby="mui-component-select-currency"
                                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                      id="mui-component-select-currency"
                                                      role="button"
                                                      tabindex="0"
                                                    >
                                                      <span>
                                                        ​
                                                      </span>
                                                    </div>
                                                  }
                                                  classes={
                                                    Object {
                                                      "list": "MuiMenu-list",
                                                      "paper": "MuiMenu-paper",
                                                    }
                                                  }
                                                  id="menu-currency"
                                                  onClose={[Function]}
                                                  open={false}
                                                >
                                                  <WithStyles(ForwardRef(Popover))
                                                    PaperProps={
                                                      Object {
                                                        "classes": Object {
                                                          "root": "MuiMenu-paper",
                                                        },
                                                        "style": Object {
                                                          "minWidth": undefined,
                                                        },
                                                      }
                                                    }
                                                    anchorEl={
                                                      <div
                                                        aria-haspopup="listbox"
                                                        aria-labelledby="mui-component-select-currency"
                                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                        id="mui-component-select-currency"
                                                        role="button"
                                                        tabindex="0"
                                                      >
                                                        <span>
                                                          ​
                                                        </span>
                                                      </div>
                                                    }
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    getContentAnchorEl={[Function]}
                                                    id="menu-currency"
                                                    onClose={[Function]}
                                                    onEntering={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <ForwardRef(Popover)
                                                      PaperProps={
                                                        Object {
                                                          "classes": Object {
                                                            "root": "MuiMenu-paper",
                                                          },
                                                          "style": Object {
                                                            "minWidth": undefined,
                                                          },
                                                        }
                                                      }
                                                      anchorEl={
                                                        <div
                                                          aria-haspopup="listbox"
                                                          aria-labelledby="mui-component-select-currency"
                                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                          id="mui-component-select-currency"
                                                          role="button"
                                                          tabindex="0"
                                                        >
                                                          <span>
                                                            ​
                                                          </span>
                                                        </div>
                                                      }
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "paper": "MuiPopover-paper",
                                                          "root": "MuiPopover-root",
                                                        }
                                                      }
                                                      getContentAnchorEl={[Function]}
                                                      id="menu-currency"
                                                      onClose={[Function]}
                                                      onEntering={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      transitionDuration="auto"
                                                    >
                                                      <ForwardRef(Modal)
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        className="MuiPopover-root"
                                                        container={<body />}
                                                        id="menu-currency"
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </ForwardRef(Popover)>
                                                  </WithStyles(ForwardRef(Popover))>
                                                </ForwardRef(Menu)>
                                              </WithStyles(ForwardRef(Menu))>
                                            </ForwardRef(SelectInput)>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(Input)>
                                  </WithStyles(ForwardRef(Input))>
                                </ForwardRef(Select)>
                              </WithStyles(ForwardRef(Select))>
                            </FormikMaterialUISelect>
                          </Field>
                          <WithStyles(ForwardRef(FormHelperText))>
                            <ForwardRef(FormHelperText)
                              classes={
                                Object {
                                  "contained": "MuiFormHelperText-contained",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "filled": "MuiFormHelperText-filled",
                                  "focused": "Mui-focused",
                                  "marginDense": "MuiFormHelperText-marginDense",
                                  "required": "Mui-required",
                                  "root": "MuiFormHelperText-root",
                                }
                              }
                            >
                              <p
                                className="MuiFormHelperText-root"
                              >
                                Select your default currency
                              </p>
                            </ForwardRef(FormHelperText)>
                          </WithStyles(ForwardRef(FormHelperText))>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      md={6}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        md={6}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-6"
                        >
                          <Field
                            InputLabelProps={
                              Object {
                                "shrink": true,
                              }
                            }
                            component={[Function]}
                            fullWidth={true}
                            helperText="You will be notified when you reach this limit"
                            id="limit"
                            inputProps={
                              Object {
                                "data-testid": "limit-input",
                              }
                            }
                            label="Your month limit"
                            name="monthLimit"
                            required={true}
                            type="number"
                          >
                            <FormikMaterialUITextField
                              InputLabelProps={
                                Object {
                                  "shrink": true,
                                }
                              }
                              field={
                                Object {
                                  "name": "monthLimit",
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "value": "",
                                }
                              }
                              form={
                                Object {
                                  "dirty": false,
                                  "errors": Object {},
                                  "getFieldHelpers": [Function],
                                  "getFieldMeta": [Function],
                                  "getFieldProps": [Function],
                                  "handleBlur": [Function],
                                  "handleChange": [Function],
                                  "handleReset": [Function],
                                  "handleSubmit": [Function],
                                  "initialErrors": Object {},
                                  "initialStatus": undefined,
                                  "initialTouched": Object {},
                                  "initialValues": Object {
                                    "currency": "",
                                    "monthLimit": "",
                                  },
                                  "isSubmitting": false,
                                  "isValid": true,
                                  "isValidating": false,
                                  "registerField": [Function],
                                  "resetForm": [Function],
                                  "setErrors": [Function],
                                  "setFieldError": [Function],
                                  "setFieldTouched": [Function],
                                  "setFieldValue": [Function],
                                  "setFormikState": [Function],
                                  "setStatus": [Function],
                                  "setSubmitting": [Function],
                                  "setTouched": [Function],
                                  "setValues": [Function],
                                  "status": undefined,
                                  "submitCount": 0,
                                  "submitForm": [Function],
                                  "touched": Object {},
                                  "unregisterField": [Function],
                                  "validateField": [Function],
                                  "validateForm": [Function],
                                  "validateOnBlur": true,
                                  "validateOnChange": true,
                                  "validateOnMount": false,
                                  "values": Object {
                                    "currency": "",
                                    "monthLimit": "",
                                  },
                                }
                              }
                              fullWidth={true}
                              helperText="You will be notified when you reach this limit"
                              id="limit"
                              inputProps={
                                Object {
                                  "data-testid": "limit-input",
                                }
                              }
                              label="Your month limit"
                              required={true}
                              type="number"
                            >
                              <WithStyles(ForwardRef(TextField))
                                InputLabelProps={
                                  Object {
                                    "shrink": true,
                                  }
                                }
                                disabled={false}
                                fullWidth={true}
                                helperText="You will be notified when you reach this limit"
                                id="limit"
                                inputProps={
                                  Object {
                                    "data-testid": "limit-input",
                                  }
                                }
                                label="Your month limit"
                                name="monthLimit"
                                onBlur={[Function]}
                                onChange={[Function]}
                                required={true}
                                type="number"
                                value=""
                              >
                                <ForwardRef(TextField)
                                  InputLabelProps={
                                    Object {
                                      "shrink": true,
                                    }
                                  }
                                  classes={
                                    Object {
                                      "root": "MuiTextField-root",
                                    }
                                  }
                                  disabled={false}
                                  fullWidth={true}
                                  helperText="You will be notified when you reach this limit"
                                  id="limit"
                                  inputProps={
                                    Object {
                                      "data-testid": "limit-input",
                                    }
                                  }
                                  label="Your month limit"
                                  name="monthLimit"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  required={true}
                                  type="number"
                                  value=""
                                >
                                  <WithStyles(ForwardRef(FormControl))
                                    className="MuiTextField-root"
                                    color="primary"
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    required={true}
                                    variant="standard"
                                  >
                                    <ForwardRef(FormControl)
                                      className="MuiTextField-root"
                                      classes={
                                        Object {
                                          "fullWidth": "MuiFormControl-fullWidth",
                                          "marginDense": "MuiFormControl-marginDense",
                                          "marginNormal": "MuiFormControl-marginNormal",
                                          "root": "MuiFormControl-root",
                                        }
                                      }
                                      color="primary"
                                      disabled={false}
                                      error={false}
                                      fullWidth={true}
                                      required={true}
                                      variant="standard"
                                    >
                                      <div
                                        className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                      >
                                        <WithStyles(ForwardRef(InputLabel))
                                          htmlFor="limit"
                                          id="limit-label"
                                          shrink={true}
                                        >
                                          <ForwardRef(InputLabel)
                                            classes={
                                              Object {
                                                "animated": "MuiInputLabel-animated",
                                                "asterisk": "MuiInputLabel-asterisk",
                                                "disabled": "Mui-disabled",
                                                "error": "Mui-error",
                                                "filled": "MuiInputLabel-filled",
                                                "focused": "Mui-focused",
                                                "formControl": "MuiInputLabel-formControl",
                                                "marginDense": "MuiInputLabel-marginDense",
                                                "outlined": "MuiInputLabel-outlined",
                                                "required": "Mui-required",
                                                "root": "MuiInputLabel-root",
                                                "shrink": "MuiInputLabel-shrink",
                                              }
                                            }
                                            htmlFor="limit"
                                            id="limit-label"
                                            shrink={true}
                                          >
                                            <WithStyles(ForwardRef(FormLabel))
                                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                              classes={
                                                Object {
                                                  "asterisk": "MuiInputLabel-asterisk",
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "focused": "Mui-focused",
                                                  "required": "Mui-required",
                                                }
                                              }
                                              data-shrink={true}
                                              htmlFor="limit"
                                              id="limit-label"
                                            >
                                              <ForwardRef(FormLabel)
                                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                                classes={
                                                  Object {
                                                    "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                    "colorSecondary": "MuiFormLabel-colorSecondary",
                                                    "disabled": "Mui-disabled Mui-disabled",
                                                    "error": "Mui-error Mui-error",
                                                    "filled": "MuiFormLabel-filled",
                                                    "focused": "Mui-focused Mui-focused",
                                                    "required": "Mui-required Mui-required",
                                                    "root": "MuiFormLabel-root",
                                                  }
                                                }
                                                data-shrink={true}
                                                htmlFor="limit"
                                                id="limit-label"
                                              >
                                                <label
                                                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-required Mui-required"
                                                  data-shrink={true}
                                                  htmlFor="limit"
                                                  id="limit-label"
                                                >
                                                  Your month limit
                                                  <span
                                                    aria-hidden={true}
                                                    className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                                  >
                                                     
                                                    *
                                                  </span>
                                                </label>
                                              </ForwardRef(FormLabel)>
                                            </WithStyles(ForwardRef(FormLabel))>
                                          </ForwardRef(InputLabel)>
                                        </WithStyles(ForwardRef(InputLabel))>
                                        <WithStyles(ForwardRef(Input))
                                          aria-describedby="limit-helper-text"
                                          autoFocus={false}
                                          fullWidth={true}
                                          id="limit"
                                          inputProps={
                                            Object {
                                              "data-testid": "limit-input",
                                            }
                                          }
                                          multiline={false}
                                          name="monthLimit"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="number"
                                          value=""
                                        >
                                          <ForwardRef(Input)
                                            aria-describedby="limit-helper-text"
                                            autoFocus={false}
                                            classes={
                                              Object {
                                                "colorSecondary": "MuiInput-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "error": "Mui-error",
                                                "focused": "Mui-focused",
                                                "formControl": "MuiInput-formControl",
                                                "fullWidth": "MuiInput-fullWidth",
                                                "input": "MuiInput-input",
                                                "inputMarginDense": "MuiInput-inputMarginDense",
                                                "inputMultiline": "MuiInput-inputMultiline",
                                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                "marginDense": "MuiInput-marginDense",
                                                "multiline": "MuiInput-multiline",
                                                "root": "MuiInput-root",
                                                "underline": "MuiInput-underline",
                                              }
                                            }
                                            fullWidth={true}
                                            id="limit"
                                            inputProps={
                                              Object {
                                                "data-testid": "limit-input",
                                              }
                                            }
                                            multiline={false}
                                            name="monthLimit"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="number"
                                            value=""
                                          >
                                            <WithStyles(ForwardRef(InputBase))
                                              aria-describedby="limit-helper-text"
                                              autoFocus={false}
                                              classes={
                                                Object {
                                                  "colorSecondary": "MuiInput-colorSecondary",
                                                  "disabled": "Mui-disabled",
                                                  "error": "Mui-error",
                                                  "focused": "Mui-focused",
                                                  "formControl": "MuiInput-formControl",
                                                  "fullWidth": "MuiInput-fullWidth",
                                                  "input": "MuiInput-input",
                                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                                  "inputMultiline": "MuiInput-inputMultiline",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                  "marginDense": "MuiInput-marginDense",
                                                  "multiline": "MuiInput-multiline",
                                                  "root": "MuiInput-root MuiInput-underline",
                                                  "underline": null,
                                                }
                                              }
                                              fullWidth={true}
                                              id="limit"
                                              inputComponent="input"
                                              inputProps={
                                                Object {
                                                  "data-testid": "limit-input",
                                                }
                                              }
                                              multiline={false}
                                              name="monthLimit"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              type="number"
                                              value=""
                                            >
                                              <ForwardRef(InputBase)
                                                aria-describedby="limit-helper-text"
                                                autoFocus={false}
                                                classes={
                                                  Object {
                                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                                    "adornedStart": "MuiInputBase-adornedStart",
                                                    "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                    "disabled": "Mui-disabled Mui-disabled",
                                                    "error": "Mui-error Mui-error",
                                                    "focused": "Mui-focused Mui-focused",
                                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                    "input": "MuiInputBase-input MuiInput-input",
                                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                    "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                    "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                  }
                                                }
                                                fullWidth={true}
                                                id="limit"
                                                inputComponent="input"
                                                inputProps={
                                                  Object {
                                                    "data-testid": "limit-input",
                                                  }
                                                }
                                                multiline={false}
                                                name="monthLimit"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                type="number"
                                                value=""
                                              >
                                                <div
                                                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                  onClick={[Function]}
                                                >
                                                  <input
                                                    aria-describedby="limit-helper-text"
                                                    aria-invalid={false}
                                                    autoFocus={false}
                                                    className="MuiInputBase-input MuiInput-input"
                                                    data-testid="limit-input"
                                                    disabled={false}
                                                    id="limit"
                                                    name="monthLimit"
                                                    onAnimationStart={[Function]}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    required={true}
                                                    type="number"
                                                    value=""
                                                  />
                                                </div>
                                              </ForwardRef(InputBase)>
                                            </WithStyles(ForwardRef(InputBase))>
                                          </ForwardRef(Input)>
                                        </WithStyles(ForwardRef(Input))>
                                        <WithStyles(ForwardRef(FormHelperText))
                                          id="limit-helper-text"
                                        >
                                          <ForwardRef(FormHelperText)
                                            classes={
                                              Object {
                                                "contained": "MuiFormHelperText-contained",
                                                "disabled": "Mui-disabled",
                                                "error": "Mui-error",
                                                "filled": "MuiFormHelperText-filled",
                                                "focused": "Mui-focused",
                                                "marginDense": "MuiFormHelperText-marginDense",
                                                "required": "Mui-required",
                                                "root": "MuiFormHelperText-root",
                                              }
                                            }
                                            id="limit-helper-text"
                                          >
                                            <p
                                              className="MuiFormHelperText-root Mui-required"
                                              id="limit-helper-text"
                                            >
                                              You will be notified when you reach this limit
                                            </p>
                                          </ForwardRef(FormHelperText)>
                                        </WithStyles(ForwardRef(FormHelperText))>
                                      </div>
                                    </ForwardRef(FormControl)>
                                  </WithStyles(ForwardRef(FormControl))>
                                </ForwardRef(TextField)>
                              </WithStyles(ForwardRef(TextField))>
                            </FormikMaterialUITextField>
                          </Field>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      md={12}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        md={12}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-12"
                        >
                          <WithStyles(ForwardRef(Typography))
                            gutterBottom={true}
                            variant="h6"
                          >
                            <ForwardRef(Typography)
                              classes={
                                Object {
                                  "alignCenter": "MuiTypography-alignCenter",
                                  "alignJustify": "MuiTypography-alignJustify",
                                  "alignLeft": "MuiTypography-alignLeft",
                                  "alignRight": "MuiTypography-alignRight",
                                  "body1": "MuiTypography-body1",
                                  "body2": "MuiTypography-body2",
                                  "button": "MuiTypography-button",
                                  "caption": "MuiTypography-caption",
                                  "colorError": "MuiTypography-colorError",
                                  "colorInherit": "MuiTypography-colorInherit",
                                  "colorPrimary": "MuiTypography-colorPrimary",
                                  "colorSecondary": "MuiTypography-colorSecondary",
                                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                  "displayBlock": "MuiTypography-displayBlock",
                                  "displayInline": "MuiTypography-displayInline",
                                  "gutterBottom": "MuiTypography-gutterBottom",
                                  "h1": "MuiTypography-h1",
                                  "h2": "MuiTypography-h2",
                                  "h3": "MuiTypography-h3",
                                  "h4": "MuiTypography-h4",
                                  "h5": "MuiTypography-h5",
                                  "h6": "MuiTypography-h6",
                                  "noWrap": "MuiTypography-noWrap",
                                  "overline": "MuiTypography-overline",
                                  "paragraph": "MuiTypography-paragraph",
                                  "root": "MuiTypography-root",
                                  "srOnly": "MuiTypography-srOnly",
                                  "subtitle1": "MuiTypography-subtitle1",
                                  "subtitle2": "MuiTypography-subtitle2",
                                }
                              }
                              gutterBottom={true}
                              variant="h6"
                            >
                              <h6
                                className="MuiTypography-root MuiTypography-h6 MuiTypography-gutterBottom"
                              >
                                Expense categories
                              </h6>
                            </ForwardRef(Typography)>
                          </WithStyles(ForwardRef(Typography))>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                    <WithStyles(ForwardRef(Grid))
                      className="disable-padding"
                      item={true}
                      md={12}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        className="disable-padding"
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        md={12}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root disable-padding MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-12"
                        >
                          <CategorySelectForm
                            onCategorySelect={[Function]}
                            selectedCategories={Array []}
                          >
                            <div
                              className="category-select-wrapper"
                            >
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="0"
                                label="Money"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Money"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Money
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="1"
                                label="Food"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Food"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Food
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="2"
                                label="Technology"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Technology"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Technology
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="3"
                                label="Presents"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Presents"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Presents
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="4"
                                label="Subscriptions"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Subscriptions"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Subscriptions
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                              <WithStyles(ForwardRef(Chip))
                                data-testid="chip-option"
                                key="5"
                                label="Transport"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#f3f3f3",
                                    "color": "initial",
                                  }
                                }
                              >
                                <ForwardRef(Chip)
                                  classes={
                                    Object {
                                      "avatar": "MuiChip-avatar",
                                      "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                      "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                      "avatarSmall": "MuiChip-avatarSmall",
                                      "clickable": "MuiChip-clickable",
                                      "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                      "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                      "colorPrimary": "MuiChip-colorPrimary",
                                      "colorSecondary": "MuiChip-colorSecondary",
                                      "deletable": "MuiChip-deletable",
                                      "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                      "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                      "deleteIcon": "MuiChip-deleteIcon",
                                      "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                      "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                      "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                      "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                      "deleteIconSmall": "MuiChip-deleteIconSmall",
                                      "disabled": "Mui-disabled",
                                      "icon": "MuiChip-icon",
                                      "iconColorPrimary": "MuiChip-iconColorPrimary",
                                      "iconColorSecondary": "MuiChip-iconColorSecondary",
                                      "iconSmall": "MuiChip-iconSmall",
                                      "label": "MuiChip-label",
                                      "labelSmall": "MuiChip-labelSmall",
                                      "outlined": "MuiChip-outlined",
                                      "outlinedPrimary": "MuiChip-outlinedPrimary",
                                      "outlinedSecondary": "MuiChip-outlinedSecondary",
                                      "root": "MuiChip-root",
                                      "sizeSmall": "MuiChip-sizeSmall",
                                    }
                                  }
                                  data-testid="chip-option"
                                  label="Transport"
                                  onClick={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#f3f3f3",
                                      "color": "initial",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="MuiChip-root MuiChip-clickable"
                                    component="div"
                                    data-testid="chip-option"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    style={
                                      Object {
                                        "backgroundColor": "#f3f3f3",
                                        "color": "initial",
                                      }
                                    }
                                    tabIndex={0}
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="MuiChip-root MuiChip-clickable"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="div"
                                      data-testid="chip-option"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      style={
                                        Object {
                                          "backgroundColor": "#f3f3f3",
                                          "color": "initial",
                                        }
                                      }
                                      tabIndex={0}
                                    >
                                      <div
                                        className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                        data-testid="chip-option"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="button"
                                        style={
                                          Object {
                                            "backgroundColor": "#f3f3f3",
                                            "color": "initial",
                                          }
                                        }
                                        tabIndex={0}
                                      >
                                        <span
                                          className="MuiChip-label"
                                        >
                                          Transport
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "MuiTouchRipple-child",
                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                "ripple": "MuiTouchRipple-ripple",
                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                "root": "MuiTouchRipple-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="MuiTouchRipple-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </div>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Chip)>
                              </WithStyles(ForwardRef(Chip))>
                            </div>
                          </CategorySelectForm>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                    <WithStyles(ForwardRef(Grid))
                      item={true}
                      xs={12}
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        item={true}
                        xs={12}
                      >
                        <div
                          className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                        >
                          <WithStyles(ForwardRef(Typography))
                            gutterBottom={true}
                            variant="subtitle1"
                          >
                            <ForwardRef(Typography)
                              classes={
                                Object {
                                  "alignCenter": "MuiTypography-alignCenter",
                                  "alignJustify": "MuiTypography-alignJustify",
                                  "alignLeft": "MuiTypography-alignLeft",
                                  "alignRight": "MuiTypography-alignRight",
                                  "body1": "MuiTypography-body1",
                                  "body2": "MuiTypography-body2",
                                  "button": "MuiTypography-button",
                                  "caption": "MuiTypography-caption",
                                  "colorError": "MuiTypography-colorError",
                                  "colorInherit": "MuiTypography-colorInherit",
                                  "colorPrimary": "MuiTypography-colorPrimary",
                                  "colorSecondary": "MuiTypography-colorSecondary",
                                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                  "displayBlock": "MuiTypography-displayBlock",
                                  "displayInline": "MuiTypography-displayInline",
                                  "gutterBottom": "MuiTypography-gutterBottom",
                                  "h1": "MuiTypography-h1",
                                  "h2": "MuiTypography-h2",
                                  "h3": "MuiTypography-h3",
                                  "h4": "MuiTypography-h4",
                                  "h5": "MuiTypography-h5",
                                  "h6": "MuiTypography-h6",
                                  "noWrap": "MuiTypography-noWrap",
                                  "overline": "MuiTypography-overline",
                                  "paragraph": "MuiTypography-paragraph",
                                  "root": "MuiTypography-root",
                                  "srOnly": "MuiTypography-srOnly",
                                  "subtitle1": "MuiTypography-subtitle1",
                                  "subtitle2": "MuiTypography-subtitle2",
                                }
                              }
                              gutterBottom={true}
                              variant="subtitle1"
                            >
                              <h6
                                className="MuiTypography-root MuiTypography-subtitle1 MuiTypography-gutterBottom"
                              >
                                * 3 are required
                              </h6>
                            </ForwardRef(Typography)>
                          </WithStyles(ForwardRef(Typography))>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                className="row row-center"
                item={true}
                xs={12}
              >
                <ForwardRef(Grid)
                  className="row row-center"
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-xs-center": "MuiGrid-justify-xs-center",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  item={true}
                  xs={12}
                >
                  <div
                    className="MuiGrid-root row row-center MuiGrid-item MuiGrid-grid-xs-12"
                  >
                    <WithStyles(ForwardRef(Button))
                      color="primary"
                      data-testid="submit-button"
                      disabled={true}
                      fullWidth={true}
                      onClick={[Function]}
                      variant="contained"
                    >
                      <ForwardRef(Button)
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit",
                            "contained": "MuiButton-contained",
                            "containedPrimary": "MuiButton-containedPrimary",
                            "containedSecondary": "MuiButton-containedSecondary",
                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                            "disableElevation": "MuiButton-disableElevation",
                            "disabled": "Mui-disabled",
                            "endIcon": "MuiButton-endIcon",
                            "focusVisible": "Mui-focusVisible",
                            "fullWidth": "MuiButton-fullWidth",
                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                            "label": "MuiButton-label",
                            "outlined": "MuiButton-outlined",
                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                            "root": "MuiButton-root",
                            "sizeLarge": "MuiButton-sizeLarge",
                            "sizeSmall": "MuiButton-sizeSmall",
                            "startIcon": "MuiButton-startIcon",
                            "text": "MuiButton-text",
                            "textPrimary": "MuiButton-textPrimary",
                            "textSecondary": "MuiButton-textSecondary",
                            "textSizeLarge": "MuiButton-textSizeLarge",
                            "textSizeSmall": "MuiButton-textSizeSmall",
                          }
                        }
                        color="primary"
                        data-testid="submit-button"
                        disabled={true}
                        fullWidth={true}
                        onClick={[Function]}
                        variant="contained"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                          component="button"
                          data-testid="submit-button"
                          disabled={true}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                          type="button"
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="button"
                            data-testid="submit-button"
                            disabled={true}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                            type="button"
                          >
                            <button
                              className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary Mui-disabled MuiButton-fullWidth Mui-disabled"
                              data-testid="submit-button"
                              disabled={true}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={-1}
                              type="button"
                            >
                              <span
                                className="MuiButton-label"
                              >
                                Submit
                              </span>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Button)>
                    </WithStyles(ForwardRef(Button))>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
            </form>
          </Form>
        </Formik>
      </AdditionalInfoForm>
    </Router>
  </BrowserRouter>
</ApolloProvider>
`;
