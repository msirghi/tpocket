// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddExpenseDialog component should render dialog properly 1`] = `
<ApolloProvider
  client={
    ApolloClient {
      "cache": InMemoryCache {
        "addTypename": true,
        "cacheKeyRoot": KeyTrie {
          "weakness": true,
        },
        "config": Object {
          "addTypename": true,
          "dataIdFromObject": [Function],
          "fragmentMatcher": HeuristicFragmentMatcher {},
          "freezeResults": false,
          "resultCaching": true,
        },
        "data": DepTrackingCache {
          "data": Object {},
          "depend": [Function],
        },
        "maybeBroadcastWatch": [Function],
        "optimisticData": DepTrackingCache {
          "data": Object {},
          "depend": [Function],
        },
        "silenceBroadcast": false,
        "storeReader": StoreReader {
          "executeSelectionSet": [Function],
          "executeStoreQuery": [Function],
          "executeSubSelectedArray": [Function],
          "freezeResults": false,
        },
        "storeWriter": StoreWriter {},
        "typenameDocumentCache": Map {},
        "watches": Set {},
      },
      "clearStoreCallbacks": Array [],
      "defaultOptions": Object {},
      "disableNetworkFetches": false,
      "link": ApolloLink {
        "request": [Function],
      },
      "localState": LocalState {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "client": [Circular],
      },
      "mutate": [Function],
      "query": [Function],
      "queryDeduplication": true,
      "queryManager": QueryManager {
        "assumeImmutableResults": false,
        "clientAwareness": Object {
          "name": undefined,
          "version": undefined,
        },
        "dataStore": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "fetchQueryRejectFns": Map {},
        "idCounter": 1,
        "inFlightLinkObservables": Map {},
        "link": ApolloLink {
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutationStore": MutationStore {
          "store": Object {},
        },
        "onBroadcast": [Function],
        "pollingInfoByQueryId": Map {},
        "queries": Map {},
        "queryDeduplication": true,
        "queryStore": QueryStore {
          "store": Object {},
        },
        "ssrMode": false,
        "transformCache": WeakMap {},
      },
      "reFetchObservableQueries": [Function],
      "resetStore": [Function],
      "resetStoreCallbacks": Array [],
      "store": DataStore {
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
      },
      "typeDefs": undefined,
      "version": "2.6.10",
      "watchQuery": [Function],
    }
  }
>
  <AddExpenseDialog
    categories={
      Array [
        Object {
          "id": 1,
          "name": "Category name 1",
        },
      ]
    }
    onSuccess={[MockFunction]}
    open={true}
    toggleDialog={[MockFunction]}
  >
    <div>
      <WithStyles(ForwardRef(Dialog))
        aria-labelledby="form-dialog-title"
        onClose={[Function]}
        open={true}
      >
        <ForwardRef(Dialog)
          aria-labelledby="form-dialog-title"
          classes={
            Object {
              "container": "MuiDialog-container",
              "paper": "MuiDialog-paper",
              "paperFullScreen": "MuiDialog-paperFullScreen",
              "paperFullWidth": "MuiDialog-paperFullWidth",
              "paperScrollBody": "MuiDialog-paperScrollBody",
              "paperScrollPaper": "MuiDialog-paperScrollPaper",
              "paperWidthFalse": "MuiDialog-paperWidthFalse",
              "paperWidthLg": "MuiDialog-paperWidthLg",
              "paperWidthMd": "MuiDialog-paperWidthMd",
              "paperWidthSm": "MuiDialog-paperWidthSm",
              "paperWidthXl": "MuiDialog-paperWidthXl",
              "paperWidthXs": "MuiDialog-paperWidthXs",
              "root": "MuiDialog-root",
              "scrollBody": "MuiDialog-scrollBody",
              "scrollPaper": "MuiDialog-scrollPaper",
            }
          }
          onClose={[Function]}
          open={true}
        >
          <ForwardRef(Modal)
            BackdropComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "invisible": [Function],
                    "open": [Function],
                    "transitionDuration": [Function],
                  },
                  "render": [Function],
                },
                "displayName": "WithStyles(ForwardRef(Backdrop))",
                "options": Object {
                  "defaultTheme": Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "#303f9f",
                        "light": "#7986cb",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "#c51162",
                        "light": "#ff4081",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                  },
                  "name": "MuiBackdrop",
                },
                "propTypes": Object {
                  "classes": [Function],
                  "innerRef": [Function],
                },
                "render": [Function],
                "useStyles": [Function],
              }
            }
            BackdropProps={
              Object {
                "transitionDuration": Object {
                  "enter": 225,
                  "exit": 195,
                },
              }
            }
            className="MuiDialog-root"
            closeAfterTransition={true}
            disableBackdropClick={false}
            disableEscapeKeyDown={false}
            onClose={[Function]}
            open={true}
          >
            <ForwardRef(Portal)
              disablePortal={false}
            >
              <Portal
                containerInfo={
                  <body
                    style="padding-right: 0px; overflow: hidden;"
                  >
                    <div
                      class="MuiDialog-root"
                      role="presentation"
                      style="position: fixed; z-index: 1300; right: 0px; bottom: 0px; top: 0px; left: 0px;"
                    >
                      <div
                        aria-hidden="true"
                        class="MuiBackdrop-root"
                        style="opacity: 1; webkit-transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;"
                      />
                      <div
                        data-test="sentinelStart"
                        tabindex="0"
                      />
                      <div
                        class="MuiDialog-container MuiDialog-scrollPaper"
                        role="none presentation"
                        style="opacity: 1; webkit-transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;"
                        tabindex="-1"
                      >
                        <div
                          aria-labelledby="form-dialog-title"
                          class="MuiPaper-root MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm MuiPaper-elevation24 MuiPaper-rounded"
                          role="dialog"
                        >
                          <div
                            class="MuiDialogTitle-root"
                            id="form-dialog-title"
                          >
                            <h2
                              class="MuiTypography-root MuiTypography-h6"
                            >
                              Add new expense
                            </h2>
                          </div>
                          <div
                            class="MuiDialogContent-root"
                          >
                            <div
                              class="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                              data-test="amount-input"
                              data-testid="nameInput"
                            >
                              <label
                                class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                data-shrink="false"
                              >
                                Amount
                              </label>
                              <div
                                class="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                              >
                                <input
                                  aria-invalid="false"
                                  class="MuiInputBase-input MuiInput-input"
                                  data-testid="nameInput"
                                  type="number"
                                  value=""
                                />
                              </div>
                            </div>
                            <div
                              class="MuiFormControl-root MuiTextField-root MuiFormControl-marginDense MuiFormControl-fullWidth"
                              data-test="description-input"
                            >
                              <label
                                class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                data-shrink="false"
                              >
                                Description
                              </label>
                              <div
                                class="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline MuiInputBase-marginDense MuiInput-marginDense"
                              >
                                <textarea
                                  aria-invalid="false"
                                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                  data-testid="description-input"
                                  rows="1"
                                  style="height: 0px; overflow: hidden;"
                                />
                                <textarea
                                  aria-hidden="true"
                                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                  readonly=""
                                  style="visibility: hidden; position: absolute; overflow: hidden; height: 0px; top: 0px; left: 0px; transform: translateZ(0); width: 100%;"
                                  tabindex="-1"
                                />
                              </div>
                            </div>
                            <div
                              class="mt-1"
                            >
                              <p
                                class="MuiTypography-root MuiDialogContentText-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                              >
                                Category
                              </p>
                              <div
                                style="display: flex; justify-content: space-around; flex-wrap: wrap;"
                              >
                                <div
                                  class="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                  role="button"
                                  style="background: rgb(245, 245, 245); color: rgb(0, 0, 0);"
                                  tabindex="0"
                                >
                                  <span
                                    class="MuiChip-label"
                                  >
                                    Category Name 1
                                  </span>
                                  <span
                                    class="MuiTouchRipple-root"
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            class="MuiDialogActions-root MuiDialogActions-spacing"
                          >
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary"
                              data-test="cancel-button"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Cancel
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>
                            <button
                              class="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary Mui-disabled Mui-disabled"
                              data-test="submit-button"
                              data-testid="submit"
                              disabled=""
                              tabindex="-1"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Submit
                              </span>
                            </button>
                          </div>
                        </div>
                      </div>
                      <div
                        data-test="sentinelEnd"
                        tabindex="0"
                      />
                    </div>
                  </body>
                }
              >
                <div
                  className="MuiDialog-root"
                  onKeyDown={[Function]}
                  role="presentation"
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "top": 0,
                      "zIndex": 1300,
                    }
                  }
                >
                  <WithStyles(ForwardRef(Backdrop))
                    onClick={[Function]}
                    open={true}
                    transitionDuration={
                      Object {
                        "enter": 225,
                        "exit": 195,
                      }
                    }
                  >
                    <ForwardRef(Backdrop)
                      classes={
                        Object {
                          "invisible": "MuiBackdrop-invisible",
                          "root": "MuiBackdrop-root",
                        }
                      }
                      onClick={[Function]}
                      open={true}
                      transitionDuration={
                        Object {
                          "enter": 225,
                          "exit": 195,
                        }
                      }
                    >
                      <ForwardRef(Fade)
                        in={true}
                        onClick={[Function]}
                        timeout={
                          Object {
                            "enter": 225,
                            "exit": 195,
                          }
                        }
                      >
                        <Transition
                          appear={true}
                          enter={true}
                          exit={true}
                          in={true}
                          mountOnEnter={false}
                          onClick={[Function]}
                          onEnter={[Function]}
                          onEntered={[Function]}
                          onEntering={[Function]}
                          onExit={[Function]}
                          onExited={[Function]}
                          onExiting={[Function]}
                          timeout={
                            Object {
                              "enter": 225,
                              "exit": 195,
                            }
                          }
                          unmountOnExit={false}
                        >
                          <div
                            aria-hidden={true}
                            className="MuiBackdrop-root"
                            onClick={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                                "visibility": undefined,
                              }
                            }
                          />
                        </Transition>
                      </ForwardRef(Fade)>
                    </ForwardRef(Backdrop)>
                  </WithStyles(ForwardRef(Backdrop))>
                  <Unstable_TrapFocus
                    disableAutoFocus={false}
                    disableEnforceFocus={false}
                    disableRestoreFocus={false}
                    getDoc={[Function]}
                    isEnabled={[Function]}
                    open={true}
                  >
                    <div
                      data-test="sentinelStart"
                      tabIndex={0}
                    />
                    <ForwardRef(Fade)
                      appear={true}
                      in={true}
                      onEnter={[Function]}
                      onExited={[Function]}
                      role="none presentation"
                      tabIndex="-1"
                      timeout={
                        Object {
                          "enter": 225,
                          "exit": 195,
                        }
                      }
                    >
                      <Transition
                        appear={true}
                        enter={true}
                        exit={true}
                        in={true}
                        mountOnEnter={false}
                        onEnter={[Function]}
                        onEntered={[Function]}
                        onEntering={[Function]}
                        onExit={[Function]}
                        onExited={[Function]}
                        onExiting={[Function]}
                        role="none presentation"
                        tabIndex="-1"
                        timeout={
                          Object {
                            "enter": 225,
                            "exit": 195,
                          }
                        }
                        unmountOnExit={false}
                      >
                        <div
                          className="MuiDialog-container MuiDialog-scrollPaper"
                          onMouseDown={[Function]}
                          onMouseUp={[Function]}
                          role="none presentation"
                          style={
                            Object {
                              "opacity": 1,
                              "visibility": undefined,
                            }
                          }
                          tabIndex="-1"
                        >
                          <WithStyles(ForwardRef(Paper))
                            aria-labelledby="form-dialog-title"
                            className="MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm"
                            elevation={24}
                            role="dialog"
                          >
                            <ForwardRef(Paper)
                              aria-labelledby="form-dialog-title"
                              className="MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm"
                              classes={
                                Object {
                                  "elevation0": "MuiPaper-elevation0",
                                  "elevation1": "MuiPaper-elevation1",
                                  "elevation10": "MuiPaper-elevation10",
                                  "elevation11": "MuiPaper-elevation11",
                                  "elevation12": "MuiPaper-elevation12",
                                  "elevation13": "MuiPaper-elevation13",
                                  "elevation14": "MuiPaper-elevation14",
                                  "elevation15": "MuiPaper-elevation15",
                                  "elevation16": "MuiPaper-elevation16",
                                  "elevation17": "MuiPaper-elevation17",
                                  "elevation18": "MuiPaper-elevation18",
                                  "elevation19": "MuiPaper-elevation19",
                                  "elevation2": "MuiPaper-elevation2",
                                  "elevation20": "MuiPaper-elevation20",
                                  "elevation21": "MuiPaper-elevation21",
                                  "elevation22": "MuiPaper-elevation22",
                                  "elevation23": "MuiPaper-elevation23",
                                  "elevation24": "MuiPaper-elevation24",
                                  "elevation3": "MuiPaper-elevation3",
                                  "elevation4": "MuiPaper-elevation4",
                                  "elevation5": "MuiPaper-elevation5",
                                  "elevation6": "MuiPaper-elevation6",
                                  "elevation7": "MuiPaper-elevation7",
                                  "elevation8": "MuiPaper-elevation8",
                                  "elevation9": "MuiPaper-elevation9",
                                  "outlined": "MuiPaper-outlined",
                                  "root": "MuiPaper-root",
                                  "rounded": "MuiPaper-rounded",
                                }
                              }
                              elevation={24}
                              role="dialog"
                            >
                              <div
                                aria-labelledby="form-dialog-title"
                                className="MuiPaper-root MuiDialog-paper MuiDialog-paperScrollPaper MuiDialog-paperWidthSm MuiPaper-elevation24 MuiPaper-rounded"
                                role="dialog"
                              >
                                <WithStyles(ForwardRef(DialogTitle))
                                  id="form-dialog-title"
                                >
                                  <ForwardRef(DialogTitle)
                                    classes={
                                      Object {
                                        "root": "MuiDialogTitle-root",
                                      }
                                    }
                                    id="form-dialog-title"
                                  >
                                    <div
                                      className="MuiDialogTitle-root"
                                      id="form-dialog-title"
                                    >
                                      <WithStyles(ForwardRef(Typography))
                                        component="h2"
                                        variant="h6"
                                      >
                                        <ForwardRef(Typography)
                                          classes={
                                            Object {
                                              "alignCenter": "MuiTypography-alignCenter",
                                              "alignJustify": "MuiTypography-alignJustify",
                                              "alignLeft": "MuiTypography-alignLeft",
                                              "alignRight": "MuiTypography-alignRight",
                                              "body1": "MuiTypography-body1",
                                              "body2": "MuiTypography-body2",
                                              "button": "MuiTypography-button",
                                              "caption": "MuiTypography-caption",
                                              "colorError": "MuiTypography-colorError",
                                              "colorInherit": "MuiTypography-colorInherit",
                                              "colorPrimary": "MuiTypography-colorPrimary",
                                              "colorSecondary": "MuiTypography-colorSecondary",
                                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                              "displayBlock": "MuiTypography-displayBlock",
                                              "displayInline": "MuiTypography-displayInline",
                                              "gutterBottom": "MuiTypography-gutterBottom",
                                              "h1": "MuiTypography-h1",
                                              "h2": "MuiTypography-h2",
                                              "h3": "MuiTypography-h3",
                                              "h4": "MuiTypography-h4",
                                              "h5": "MuiTypography-h5",
                                              "h6": "MuiTypography-h6",
                                              "noWrap": "MuiTypography-noWrap",
                                              "overline": "MuiTypography-overline",
                                              "paragraph": "MuiTypography-paragraph",
                                              "root": "MuiTypography-root",
                                              "srOnly": "MuiTypography-srOnly",
                                              "subtitle1": "MuiTypography-subtitle1",
                                              "subtitle2": "MuiTypography-subtitle2",
                                            }
                                          }
                                          component="h2"
                                          variant="h6"
                                        >
                                          <h2
                                            className="MuiTypography-root MuiTypography-h6"
                                          >
                                            Add new expense
                                          </h2>
                                        </ForwardRef(Typography)>
                                      </WithStyles(ForwardRef(Typography))>
                                    </div>
                                  </ForwardRef(DialogTitle)>
                                </WithStyles(ForwardRef(DialogTitle))>
                                <WithStyles(ForwardRef(DialogContent))>
                                  <ForwardRef(DialogContent)
                                    classes={
                                      Object {
                                        "dividers": "MuiDialogContent-dividers",
                                        "root": "MuiDialogContent-root",
                                      }
                                    }
                                  >
                                    <div
                                      className="MuiDialogContent-root"
                                    >
                                      <WithStyles(ForwardRef(TextField))
                                        data-test="amount-input"
                                        data-testid="nameInput"
                                        fullWidth={true}
                                        inputProps={
                                          Object {
                                            "data-testid": "nameInput",
                                          }
                                        }
                                        label="Amount"
                                        onChange={[Function]}
                                        type="number"
                                      >
                                        <ForwardRef(TextField)
                                          classes={
                                            Object {
                                              "root": "MuiTextField-root",
                                            }
                                          }
                                          data-test="amount-input"
                                          data-testid="nameInput"
                                          fullWidth={true}
                                          inputProps={
                                            Object {
                                              "data-testid": "nameInput",
                                            }
                                          }
                                          label="Amount"
                                          onChange={[Function]}
                                          type="number"
                                        >
                                          <WithStyles(ForwardRef(FormControl))
                                            className="MuiTextField-root"
                                            color="primary"
                                            data-test="amount-input"
                                            data-testid="nameInput"
                                            disabled={false}
                                            error={false}
                                            fullWidth={true}
                                            required={false}
                                            variant="standard"
                                          >
                                            <ForwardRef(FormControl)
                                              className="MuiTextField-root"
                                              classes={
                                                Object {
                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                  "marginDense": "MuiFormControl-marginDense",
                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                  "root": "MuiFormControl-root",
                                                }
                                              }
                                              color="primary"
                                              data-test="amount-input"
                                              data-testid="nameInput"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              required={false}
                                              variant="standard"
                                            >
                                              <div
                                                className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                                                data-test="amount-input"
                                                data-testid="nameInput"
                                              >
                                                <WithStyles(ForwardRef(InputLabel))>
                                                  <ForwardRef(InputLabel)
                                                    classes={
                                                      Object {
                                                        "animated": "MuiInputLabel-animated",
                                                        "asterisk": "MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "filled": "MuiInputLabel-filled",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInputLabel-formControl",
                                                        "marginDense": "MuiInputLabel-marginDense",
                                                        "outlined": "MuiInputLabel-outlined",
                                                        "required": "Mui-required",
                                                        "root": "MuiInputLabel-root",
                                                        "shrink": "MuiInputLabel-shrink",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(ForwardRef(FormLabel))
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "required": "Mui-required",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                    >
                                                      <ForwardRef(FormLabel)
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "filled": "MuiFormLabel-filled",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "required": "Mui-required Mui-required",
                                                            "root": "MuiFormLabel-root",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                      >
                                                        <label
                                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          data-shrink={false}
                                                        >
                                                          Amount
                                                        </label>
                                                      </ForwardRef(FormLabel)>
                                                    </WithStyles(ForwardRef(FormLabel))>
                                                  </ForwardRef(InputLabel)>
                                                </WithStyles(ForwardRef(InputLabel))>
                                                <WithStyles(ForwardRef(Input))
                                                  autoFocus={false}
                                                  fullWidth={true}
                                                  inputProps={
                                                    Object {
                                                      "data-testid": "nameInput",
                                                    }
                                                  }
                                                  multiline={false}
                                                  onChange={[Function]}
                                                  type="number"
                                                >
                                                  <ForwardRef(Input)
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "colorSecondary": "MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInput-formControl",
                                                        "fullWidth": "MuiInput-fullWidth",
                                                        "input": "MuiInput-input",
                                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInput-marginDense",
                                                        "multiline": "MuiInput-multiline",
                                                        "root": "MuiInput-root",
                                                        "underline": "MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    inputProps={
                                                      Object {
                                                        "data-testid": "nameInput",
                                                      }
                                                    }
                                                    multiline={false}
                                                    onChange={[Function]}
                                                    type="number"
                                                  >
                                                    <WithStyles(ForwardRef(InputBase))
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root MuiInput-underline",
                                                          "underline": null,
                                                        }
                                                      }
                                                      fullWidth={true}
                                                      inputComponent="input"
                                                      inputProps={
                                                        Object {
                                                          "data-testid": "nameInput",
                                                        }
                                                      }
                                                      multiline={false}
                                                      onChange={[Function]}
                                                      type="number"
                                                    >
                                                      <ForwardRef(InputBase)
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "adornedEnd": "MuiInputBase-adornedEnd",
                                                            "adornedStart": "MuiInputBase-adornedStart",
                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                            "input": "MuiInputBase-input MuiInput-input",
                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                          }
                                                        }
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        inputProps={
                                                          Object {
                                                            "data-testid": "nameInput",
                                                          }
                                                        }
                                                        multiline={false}
                                                        onChange={[Function]}
                                                        type="number"
                                                      >
                                                        <div
                                                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                          onClick={[Function]}
                                                        >
                                                          <input
                                                            aria-invalid={false}
                                                            autoFocus={false}
                                                            className="MuiInputBase-input MuiInput-input"
                                                            data-testid="nameInput"
                                                            disabled={false}
                                                            onAnimationStart={[Function]}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            required={false}
                                                            type="number"
                                                          />
                                                        </div>
                                                      </ForwardRef(InputBase)>
                                                    </WithStyles(ForwardRef(InputBase))>
                                                  </ForwardRef(Input)>
                                                </WithStyles(ForwardRef(Input))>
                                              </div>
                                            </ForwardRef(FormControl)>
                                          </WithStyles(ForwardRef(FormControl))>
                                        </ForwardRef(TextField)>
                                      </WithStyles(ForwardRef(TextField))>
                                      <WithStyles(ForwardRef(TextField))
                                        data-test="description-input"
                                        fullWidth={true}
                                        inputProps={
                                          Object {
                                            "data-testid": "description-input",
                                          }
                                        }
                                        label="Description"
                                        margin="dense"
                                        multiline={true}
                                        onChange={[Function]}
                                        rowsMax={4}
                                        value=""
                                      >
                                        <ForwardRef(TextField)
                                          classes={
                                            Object {
                                              "root": "MuiTextField-root",
                                            }
                                          }
                                          data-test="description-input"
                                          fullWidth={true}
                                          inputProps={
                                            Object {
                                              "data-testid": "description-input",
                                            }
                                          }
                                          label="Description"
                                          margin="dense"
                                          multiline={true}
                                          onChange={[Function]}
                                          rowsMax={4}
                                          value=""
                                        >
                                          <WithStyles(ForwardRef(FormControl))
                                            className="MuiTextField-root"
                                            color="primary"
                                            data-test="description-input"
                                            disabled={false}
                                            error={false}
                                            fullWidth={true}
                                            margin="dense"
                                            required={false}
                                            variant="standard"
                                          >
                                            <ForwardRef(FormControl)
                                              className="MuiTextField-root"
                                              classes={
                                                Object {
                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                  "marginDense": "MuiFormControl-marginDense",
                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                  "root": "MuiFormControl-root",
                                                }
                                              }
                                              color="primary"
                                              data-test="description-input"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              margin="dense"
                                              required={false}
                                              variant="standard"
                                            >
                                              <div
                                                className="MuiFormControl-root MuiTextField-root MuiFormControl-marginDense MuiFormControl-fullWidth"
                                                data-test="description-input"
                                              >
                                                <WithStyles(ForwardRef(InputLabel))>
                                                  <ForwardRef(InputLabel)
                                                    classes={
                                                      Object {
                                                        "animated": "MuiInputLabel-animated",
                                                        "asterisk": "MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "filled": "MuiInputLabel-filled",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInputLabel-formControl",
                                                        "marginDense": "MuiInputLabel-marginDense",
                                                        "outlined": "MuiInputLabel-outlined",
                                                        "required": "Mui-required",
                                                        "root": "MuiInputLabel-root",
                                                        "shrink": "MuiInputLabel-shrink",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(ForwardRef(FormLabel))
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "required": "Mui-required",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                    >
                                                      <ForwardRef(FormLabel)
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "filled": "MuiFormLabel-filled",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "required": "Mui-required Mui-required",
                                                            "root": "MuiFormLabel-root",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                      >
                                                        <label
                                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-marginDense"
                                                          data-shrink={false}
                                                        >
                                                          Description
                                                        </label>
                                                      </ForwardRef(FormLabel)>
                                                    </WithStyles(ForwardRef(FormLabel))>
                                                  </ForwardRef(InputLabel)>
                                                </WithStyles(ForwardRef(InputLabel))>
                                                <WithStyles(ForwardRef(Input))
                                                  autoFocus={false}
                                                  fullWidth={true}
                                                  inputProps={
                                                    Object {
                                                      "data-testid": "description-input",
                                                    }
                                                  }
                                                  multiline={true}
                                                  onChange={[Function]}
                                                  rowsMax={4}
                                                  value=""
                                                >
                                                  <ForwardRef(Input)
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "colorSecondary": "MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInput-formControl",
                                                        "fullWidth": "MuiInput-fullWidth",
                                                        "input": "MuiInput-input",
                                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInput-marginDense",
                                                        "multiline": "MuiInput-multiline",
                                                        "root": "MuiInput-root",
                                                        "underline": "MuiInput-underline",
                                                      }
                                                    }
                                                    fullWidth={true}
                                                    inputProps={
                                                      Object {
                                                        "data-testid": "description-input",
                                                      }
                                                    }
                                                    multiline={true}
                                                    onChange={[Function]}
                                                    rowsMax={4}
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(InputBase))
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root MuiInput-underline",
                                                          "underline": null,
                                                        }
                                                      }
                                                      fullWidth={true}
                                                      inputComponent="input"
                                                      inputProps={
                                                        Object {
                                                          "data-testid": "description-input",
                                                        }
                                                      }
                                                      multiline={true}
                                                      onChange={[Function]}
                                                      rowsMax={4}
                                                      type="text"
                                                      value=""
                                                    >
                                                      <ForwardRef(InputBase)
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "adornedEnd": "MuiInputBase-adornedEnd",
                                                            "adornedStart": "MuiInputBase-adornedStart",
                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                            "input": "MuiInputBase-input MuiInput-input",
                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                                          }
                                                        }
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        inputProps={
                                                          Object {
                                                            "data-testid": "description-input",
                                                          }
                                                        }
                                                        multiline={true}
                                                        onChange={[Function]}
                                                        rowsMax={4}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <div
                                                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline MuiInputBase-marginDense MuiInput-marginDense"
                                                          onClick={[Function]}
                                                        >
                                                          <ForwardRef(TextareaAutosize)
                                                            aria-invalid={false}
                                                            autoFocus={false}
                                                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                            data-testid="description-input"
                                                            disabled={false}
                                                            onAnimationStart={[Function]}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            required={false}
                                                            rowsMax={4}
                                                            value=""
                                                          >
                                                            <textarea
                                                              aria-invalid={false}
                                                              autoFocus={false}
                                                              className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                              data-testid="description-input"
                                                              disabled={false}
                                                              onAnimationStart={[Function]}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              rows={1}
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "overflow": "hidden",
                                                                }
                                                              }
                                                              value=""
                                                            />
                                                            <textarea
                                                              aria-hidden={true}
                                                              className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                                              readOnly={true}
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "left": 0,
                                                                  "overflow": "hidden",
                                                                  "position": "absolute",
                                                                  "top": 0,
                                                                  "transform": "translateZ(0)",
                                                                  "visibility": "hidden",
                                                                }
                                                              }
                                                              tabIndex={-1}
                                                            />
                                                          </ForwardRef(TextareaAutosize)>
                                                        </div>
                                                      </ForwardRef(InputBase)>
                                                    </WithStyles(ForwardRef(InputBase))>
                                                  </ForwardRef(Input)>
                                                </WithStyles(ForwardRef(Input))>
                                              </div>
                                            </ForwardRef(FormControl)>
                                          </WithStyles(ForwardRef(FormControl))>
                                        </ForwardRef(TextField)>
                                      </WithStyles(ForwardRef(TextField))>
                                      <div
                                        className="mt-1"
                                      >
                                        <WithStyles(ForwardRef(DialogContentText))>
                                          <ForwardRef(DialogContentText)
                                            classes={
                                              Object {
                                                "root": "MuiDialogContentText-root",
                                              }
                                            }
                                          >
                                            <WithStyles(ForwardRef(Typography))
                                              classes={
                                                Object {
                                                  "root": "MuiDialogContentText-root",
                                                }
                                              }
                                              color="textSecondary"
                                              component="p"
                                              variant="body1"
                                            >
                                              <ForwardRef(Typography)
                                                classes={
                                                  Object {
                                                    "alignCenter": "MuiTypography-alignCenter",
                                                    "alignJustify": "MuiTypography-alignJustify",
                                                    "alignLeft": "MuiTypography-alignLeft",
                                                    "alignRight": "MuiTypography-alignRight",
                                                    "body1": "MuiTypography-body1",
                                                    "body2": "MuiTypography-body2",
                                                    "button": "MuiTypography-button",
                                                    "caption": "MuiTypography-caption",
                                                    "colorError": "MuiTypography-colorError",
                                                    "colorInherit": "MuiTypography-colorInherit",
                                                    "colorPrimary": "MuiTypography-colorPrimary",
                                                    "colorSecondary": "MuiTypography-colorSecondary",
                                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                    "displayBlock": "MuiTypography-displayBlock",
                                                    "displayInline": "MuiTypography-displayInline",
                                                    "gutterBottom": "MuiTypography-gutterBottom",
                                                    "h1": "MuiTypography-h1",
                                                    "h2": "MuiTypography-h2",
                                                    "h3": "MuiTypography-h3",
                                                    "h4": "MuiTypography-h4",
                                                    "h5": "MuiTypography-h5",
                                                    "h6": "MuiTypography-h6",
                                                    "noWrap": "MuiTypography-noWrap",
                                                    "overline": "MuiTypography-overline",
                                                    "paragraph": "MuiTypography-paragraph",
                                                    "root": "MuiTypography-root MuiDialogContentText-root",
                                                    "srOnly": "MuiTypography-srOnly",
                                                    "subtitle1": "MuiTypography-subtitle1",
                                                    "subtitle2": "MuiTypography-subtitle2",
                                                  }
                                                }
                                                color="textSecondary"
                                                component="p"
                                                variant="body1"
                                              >
                                                <p
                                                  className="MuiTypography-root MuiDialogContentText-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                                                >
                                                  Category
                                                </p>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </ForwardRef(DialogContentText)>
                                        </WithStyles(ForwardRef(DialogContentText))>
                                        <div
                                          style={
                                            Object {
                                              "display": "flex",
                                              "flexWrap": "wrap",
                                              "justifyContent": "space-around",
                                            }
                                          }
                                        >
                                          <WithStyles(ForwardRef(Chip))
                                            key="1"
                                            label="Category Name 1"
                                            onClick={[Function]}
                                            style={
                                              Object {
                                                "background": "#f5f5f5",
                                                "color": "#000",
                                              }
                                            }
                                          >
                                            <ForwardRef(Chip)
                                              classes={
                                                Object {
                                                  "avatar": "MuiChip-avatar",
                                                  "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                                  "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                                  "avatarSmall": "MuiChip-avatarSmall",
                                                  "clickable": "MuiChip-clickable",
                                                  "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                                  "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                                  "colorPrimary": "MuiChip-colorPrimary",
                                                  "colorSecondary": "MuiChip-colorSecondary",
                                                  "deletable": "MuiChip-deletable",
                                                  "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                                  "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                                  "deleteIcon": "MuiChip-deleteIcon",
                                                  "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                                  "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                                  "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                                  "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                                  "deleteIconSmall": "MuiChip-deleteIconSmall",
                                                  "disabled": "Mui-disabled",
                                                  "icon": "MuiChip-icon",
                                                  "iconColorPrimary": "MuiChip-iconColorPrimary",
                                                  "iconColorSecondary": "MuiChip-iconColorSecondary",
                                                  "iconSmall": "MuiChip-iconSmall",
                                                  "label": "MuiChip-label",
                                                  "labelSmall": "MuiChip-labelSmall",
                                                  "outlined": "MuiChip-outlined",
                                                  "outlinedPrimary": "MuiChip-outlinedPrimary",
                                                  "outlinedSecondary": "MuiChip-outlinedSecondary",
                                                  "root": "MuiChip-root",
                                                  "sizeSmall": "MuiChip-sizeSmall",
                                                }
                                              }
                                              label="Category Name 1"
                                              onClick={[Function]}
                                              style={
                                                Object {
                                                  "background": "#f5f5f5",
                                                  "color": "#000",
                                                }
                                              }
                                            >
                                              <WithStyles(ForwardRef(ButtonBase))
                                                className="MuiChip-root MuiChip-clickable"
                                                component="div"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                style={
                                                  Object {
                                                    "background": "#f5f5f5",
                                                    "color": "#000",
                                                  }
                                                }
                                                tabIndex={0}
                                              >
                                                <ForwardRef(ButtonBase)
                                                  className="MuiChip-root MuiChip-clickable"
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiButtonBase-root",
                                                    }
                                                  }
                                                  component="div"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  style={
                                                    Object {
                                                      "background": "#f5f5f5",
                                                      "color": "#000",
                                                    }
                                                  }
                                                  tabIndex={0}
                                                >
                                                  <div
                                                    className="MuiButtonBase-root MuiChip-root MuiChip-clickable"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onDragLeave={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    role="button"
                                                    style={
                                                      Object {
                                                        "background": "#f5f5f5",
                                                        "color": "#000",
                                                      }
                                                    }
                                                    tabIndex={0}
                                                  >
                                                    <span
                                                      className="MuiChip-label"
                                                    >
                                                      Category Name 1
                                                    </span>
                                                    <WithStyles(memo)
                                                      center={false}
                                                    >
                                                      <ForwardRef(TouchRipple)
                                                        center={false}
                                                        classes={
                                                          Object {
                                                            "child": "MuiTouchRipple-child",
                                                            "childLeaving": "MuiTouchRipple-childLeaving",
                                                            "childPulsate": "MuiTouchRipple-childPulsate",
                                                            "ripple": "MuiTouchRipple-ripple",
                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                            "root": "MuiTouchRipple-root",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          className="MuiTouchRipple-root"
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            component={null}
                                                            exit={true}
                                                          />
                                                        </span>
                                                      </ForwardRef(TouchRipple)>
                                                    </WithStyles(memo)>
                                                  </div>
                                                </ForwardRef(ButtonBase)>
                                              </WithStyles(ForwardRef(ButtonBase))>
                                            </ForwardRef(Chip)>
                                          </WithStyles(ForwardRef(Chip))>
                                        </div>
                                      </div>
                                    </div>
                                  </ForwardRef(DialogContent)>
                                </WithStyles(ForwardRef(DialogContent))>
                                <WithStyles(ForwardRef(DialogActions))>
                                  <ForwardRef(DialogActions)
                                    classes={
                                      Object {
                                        "root": "MuiDialogActions-root",
                                        "spacing": "MuiDialogActions-spacing",
                                      }
                                    }
                                  >
                                    <div
                                      className="MuiDialogActions-root MuiDialogActions-spacing"
                                    >
                                      <WithStyles(ForwardRef(Button))
                                        color="secondary"
                                        data-test="cancel-button"
                                        onClick={[Function]}
                                      >
                                        <ForwardRef(Button)
                                          classes={
                                            Object {
                                              "colorInherit": "MuiButton-colorInherit",
                                              "contained": "MuiButton-contained",
                                              "containedPrimary": "MuiButton-containedPrimary",
                                              "containedSecondary": "MuiButton-containedSecondary",
                                              "containedSizeLarge": "MuiButton-containedSizeLarge",
                                              "containedSizeSmall": "MuiButton-containedSizeSmall",
                                              "disableElevation": "MuiButton-disableElevation",
                                              "disabled": "Mui-disabled",
                                              "endIcon": "MuiButton-endIcon",
                                              "focusVisible": "Mui-focusVisible",
                                              "fullWidth": "MuiButton-fullWidth",
                                              "iconSizeLarge": "MuiButton-iconSizeLarge",
                                              "iconSizeMedium": "MuiButton-iconSizeMedium",
                                              "iconSizeSmall": "MuiButton-iconSizeSmall",
                                              "label": "MuiButton-label",
                                              "outlined": "MuiButton-outlined",
                                              "outlinedPrimary": "MuiButton-outlinedPrimary",
                                              "outlinedSecondary": "MuiButton-outlinedSecondary",
                                              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                              "root": "MuiButton-root",
                                              "sizeLarge": "MuiButton-sizeLarge",
                                              "sizeSmall": "MuiButton-sizeSmall",
                                              "startIcon": "MuiButton-startIcon",
                                              "text": "MuiButton-text",
                                              "textPrimary": "MuiButton-textPrimary",
                                              "textSecondary": "MuiButton-textSecondary",
                                              "textSizeLarge": "MuiButton-textSizeLarge",
                                              "textSizeSmall": "MuiButton-textSizeSmall",
                                            }
                                          }
                                          color="secondary"
                                          data-test="cancel-button"
                                          onClick={[Function]}
                                        >
                                          <WithStyles(ForwardRef(ButtonBase))
                                            className="MuiButton-root MuiButton-text MuiButton-textSecondary"
                                            component="button"
                                            data-test="cancel-button"
                                            disabled={false}
                                            focusRipple={true}
                                            focusVisibleClassName="Mui-focusVisible"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <ForwardRef(ButtonBase)
                                              className="MuiButton-root MuiButton-text MuiButton-textSecondary"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "focusVisible": "Mui-focusVisible",
                                                  "root": "MuiButtonBase-root",
                                                }
                                              }
                                              component="button"
                                              data-test="cancel-button"
                                              disabled={false}
                                              focusRipple={true}
                                              focusVisibleClassName="Mui-focusVisible"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary"
                                                data-test="cancel-button"
                                                disabled={false}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onDragLeave={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                                onMouseLeave={[Function]}
                                                onMouseUp={[Function]}
                                                onTouchEnd={[Function]}
                                                onTouchMove={[Function]}
                                                onTouchStart={[Function]}
                                                tabIndex={0}
                                                type="button"
                                              >
                                                <span
                                                  className="MuiButton-label"
                                                >
                                                  Cancel
                                                </span>
                                                <WithStyles(memo)
                                                  center={false}
                                                >
                                                  <ForwardRef(TouchRipple)
                                                    center={false}
                                                    classes={
                                                      Object {
                                                        "child": "MuiTouchRipple-child",
                                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                                        "ripple": "MuiTouchRipple-ripple",
                                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                        "root": "MuiTouchRipple-root",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="MuiTouchRipple-root"
                                                    >
                                                      <TransitionGroup
                                                        childFactory={[Function]}
                                                        component={null}
                                                        exit={true}
                                                      />
                                                    </span>
                                                  </ForwardRef(TouchRipple)>
                                                </WithStyles(memo)>
                                              </button>
                                            </ForwardRef(ButtonBase)>
                                          </WithStyles(ForwardRef(ButtonBase))>
                                        </ForwardRef(Button)>
                                      </WithStyles(ForwardRef(Button))>
                                      <WithStyles(ForwardRef(Button))
                                        color="primary"
                                        data-test="submit-button"
                                        data-testid="submit"
                                        disabled={true}
                                        onClick={[Function]}
                                      >
                                        <ForwardRef(Button)
                                          classes={
                                            Object {
                                              "colorInherit": "MuiButton-colorInherit",
                                              "contained": "MuiButton-contained",
                                              "containedPrimary": "MuiButton-containedPrimary",
                                              "containedSecondary": "MuiButton-containedSecondary",
                                              "containedSizeLarge": "MuiButton-containedSizeLarge",
                                              "containedSizeSmall": "MuiButton-containedSizeSmall",
                                              "disableElevation": "MuiButton-disableElevation",
                                              "disabled": "Mui-disabled",
                                              "endIcon": "MuiButton-endIcon",
                                              "focusVisible": "Mui-focusVisible",
                                              "fullWidth": "MuiButton-fullWidth",
                                              "iconSizeLarge": "MuiButton-iconSizeLarge",
                                              "iconSizeMedium": "MuiButton-iconSizeMedium",
                                              "iconSizeSmall": "MuiButton-iconSizeSmall",
                                              "label": "MuiButton-label",
                                              "outlined": "MuiButton-outlined",
                                              "outlinedPrimary": "MuiButton-outlinedPrimary",
                                              "outlinedSecondary": "MuiButton-outlinedSecondary",
                                              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                              "root": "MuiButton-root",
                                              "sizeLarge": "MuiButton-sizeLarge",
                                              "sizeSmall": "MuiButton-sizeSmall",
                                              "startIcon": "MuiButton-startIcon",
                                              "text": "MuiButton-text",
                                              "textPrimary": "MuiButton-textPrimary",
                                              "textSecondary": "MuiButton-textSecondary",
                                              "textSizeLarge": "MuiButton-textSizeLarge",
                                              "textSizeSmall": "MuiButton-textSizeSmall",
                                            }
                                          }
                                          color="primary"
                                          data-test="submit-button"
                                          data-testid="submit"
                                          disabled={true}
                                          onClick={[Function]}
                                        >
                                          <WithStyles(ForwardRef(ButtonBase))
                                            className="MuiButton-root MuiButton-text MuiButton-textPrimary Mui-disabled"
                                            component="button"
                                            data-test="submit-button"
                                            data-testid="submit"
                                            disabled={true}
                                            focusRipple={true}
                                            focusVisibleClassName="Mui-focusVisible"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <ForwardRef(ButtonBase)
                                              className="MuiButton-root MuiButton-text MuiButton-textPrimary Mui-disabled"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "focusVisible": "Mui-focusVisible",
                                                  "root": "MuiButtonBase-root",
                                                }
                                              }
                                              component="button"
                                              data-test="submit-button"
                                              data-testid="submit"
                                              disabled={true}
                                              focusRipple={true}
                                              focusVisibleClassName="Mui-focusVisible"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary Mui-disabled Mui-disabled"
                                                data-test="submit-button"
                                                data-testid="submit"
                                                disabled={true}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onDragLeave={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                                onMouseLeave={[Function]}
                                                onMouseUp={[Function]}
                                                onTouchEnd={[Function]}
                                                onTouchMove={[Function]}
                                                onTouchStart={[Function]}
                                                tabIndex={-1}
                                                type="button"
                                              >
                                                <span
                                                  className="MuiButton-label"
                                                >
                                                  Submit
                                                </span>
                                              </button>
                                            </ForwardRef(ButtonBase)>
                                          </WithStyles(ForwardRef(ButtonBase))>
                                        </ForwardRef(Button)>
                                      </WithStyles(ForwardRef(Button))>
                                    </div>
                                  </ForwardRef(DialogActions)>
                                </WithStyles(ForwardRef(DialogActions))>
                              </div>
                            </ForwardRef(Paper)>
                          </WithStyles(ForwardRef(Paper))>
                        </div>
                      </Transition>
                    </ForwardRef(Fade)>
                    <div
                      data-test="sentinelEnd"
                      tabIndex={0}
                    />
                  </Unstable_TrapFocus>
                </div>
              </Portal>
            </ForwardRef(Portal)>
          </ForwardRef(Modal)>
        </ForwardRef(Dialog)>
      </WithStyles(ForwardRef(Dialog))>
    </div>
  </AddExpenseDialog>
</ApolloProvider>
`;
